USE master
GO

--------------------------
IF EXISTS (SELECT * FROM master.dbo.SYSDATABASES WHERE NAME = 'Obligatorio')
	BEGIN
		USE master	
		DROP DATABASE Obligatorio
	END
GO


-- # CREO LA BASE DE DATOS #
CREATE DATABASE Obligatorio
GO

-- # SELECCIONO LA BASE DE DATOS #
USE Obligatorio
GO


-- # CREO TABLAS #
CREATE TABLE VEHICULOS
(
	MATRICULA VARCHAR(7) CHECK(MATRICULA LIKE ('[a-Z][a-Z][a-Z][0-9][0-9][0-9][0-9]')),
	MODELO VARCHAR(20) NOT NULL,
	MARCA VARCHAR(20) NOT NULL,
	ANIO INT NOT NULL,
	CANTIDAD_PUERTAS INT CHECK((CANTIDAD_PUERTAS > 0) AND (CANTIDAD_PUERTAS <= 5)) NOT NULL,
	COSTO_DIARIO MONEY CHECK(COSTO_DIARIO > 0) NOT NULL,
	PRIMARY KEY (MATRICULA)
)
GO

CREATE TABLE AUTOS
(
	MATRICULA VARCHAR(7) CHECK(MATRICULA LIKE ('[a-Z][a-Z][a-Z][0-9][0-9][0-9][0-9]')),
	TIPO_ANCLAJE VARCHAR(20) CHECK(TIPO_ANCLAJE IN ('CINTURÓN', 'ISOFIX', 'LATCH')) NOT NULL,
	FOREIGN KEY (MATRICULA) REFERENCES VEHICULOS(MATRICULA),
	PRIMARY KEY (MATRICULA)
)
GO

CREATE TABLE UTILITARIOS
(
	MATRICULA VARCHAR(7) CHECK(MATRICULA LIKE ('[a-Z][a-Z][a-Z][0-9][0-9][0-9][0-9]')),
	CAPACIDAD_CARGA INT CHECK(CAPACIDAD_CARGA > 0) NOT NULL,
	TIPO VARCHAR(20) CHECK(TIPO IN ('FURGONETA', 'PICKUP')) NOT NULL,
	FOREIGN KEY (MATRICULA) REFERENCES VEHICULOS(MATRICULA),
	PRIMARY KEY (MATRICULA)
)
GO

CREATE TABLE CLIENTES
(
	CEDULA VARCHAR(8) CHECK((LEN(CEDULA) = 7 OR LEN(CEDULA) = 8) AND (ISNUMERIC(CEDULA) = 1)),
	TARJETA_CREDITO VARCHAR(16) CHECK(LEN(TARJETA_CREDITO) = 16 AND ISNUMERIC(TARJETA_CREDITO) = 1) UNIQUE,
	NOMBRE_COMPLETO VARCHAR(50) CHECK(LEN(NOMBRE_COMPLETO) >= 3) NOT NULL,
	FECHA_NACIMIENTO SMALLDATETIME CHECK(DATEDIFF(YEAR, FECHA_NACIMIENTO, getDate()) >= 25) NOT NULL,
	TELEFONO VARCHAR(10) NOT NULL,
	DIRECCION VARCHAR(30) NOT NULL,
	PRIMARY KEY (CEDULA)
)
GO

CREATE TABLE ALQUILERES
(
	ID INT IDENTITY(1,1),
	MATRICULA VARCHAR(7) CHECK(MATRICULA LIKE ('[a-Z][a-Z][a-Z][0-9][0-9][0-9][0-9]')),
	CEDULA VARCHAR(8) CHECK((LEN(CEDULA) = 7 OR LEN(CEDULA) = 8) AND (ISNUMERIC(CEDULA) = 1)),
	FECHA_INICIO SMALLDATETIME CHECK(FECHA_INICIO >= getDate()) NOT NULL,
	FECHA_FIN SMALLDATETIME CHECK(FECHA_FIN > getDate()) NOT NULL,
	COSTO_TOTAL MONEY CHECK(COSTO_TOTAL > 0) NOT NULL,
	FOREIGN KEY (CEDULA) REFERENCES CLIENTES(CEDULA),
	FOREIGN KEY (MATRICULA) REFERENCES VEHICULOS(MATRICULA),
	PRIMARY KEY (ID, CEDULA, MATRICULA)
)
GO

-- # INSERCIÓN DE DATOS DE PRUEBA #

INSERT INTO CLIENTES(CEDULA, TARJETA_CREDITO,NOMBRE_COMPLETO, FECHA_NACIMIENTO, TELEFONO, DIRECCION)
VALUES ('78787878', '1234567890123456', 'Prueba Uno', '29/09/1992', '099999999','GRAL. URQUIZA 4321')

INSERT INTO CLIENTES(CEDULA, TARJETA_CREDITO,NOMBRE_COMPLETO, FECHA_NACIMIENTO, TELEFONO, DIRECCION)
VALUES ('8787878', '6543210987654321', 'Prueba Dos', '11/03/1991', '098888888','18 DE JULIO 1234')

INSERT INTO CLIENTES(CEDULA, TARJETA_CREDITO,NOMBRE_COMPLETO, FECHA_NACIMIENTO, TELEFONO, DIRECCION)
VALUES ('75757575', '0123456789012345', 'Prueba Tres', '01/01/1990', '091111111','BVAR. ARTIGAS 1111')

INSERT INTO VEHICULOS(MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO)
VALUES ('AAA1234', '308', 'PEUGEOT', 2015, 5, 100)

INSERT INTO VEHICULOS(MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO)
VALUES ('BBB1234', 'FIESTA', 'FORD', 2016, 5, 85)

INSERT INTO VEHICULOS(MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO)
VALUES ('CCC1234', 'RAPTOR', 'FORD', 2017, 4, 120)

INSERT INTO VEHICULOS(MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO)
VALUES ('DDD1234', 'TORO', 'FIAT', 2017, 4, 110)

INSERT INTO AUTOS(MATRICULA, TIPO_ANCLAJE)
VALUES ('AAA1234', 'CINTURÓN')

INSERT INTO AUTOS(MATRICULA, TIPO_ANCLAJE)
VALUES ('BBB1234', 'ISOFIX')

INSERT INTO UTILITARIOS(MATRICULA, TIPO, CAPACIDAD_CARGA)
VALUES ('CCC1234', 'PICKUP', 1000)

INSERT INTO UTILITARIOS(MATRICULA, TIPO, CAPACIDAD_CARGA)
VALUES ('DDD1234', 'FURGONETA', 650)

-- # STORED PROCEDURE #

USE Obligatorio
GO

CREATE PROCEDURE AgregarCliente @Cedula VARCHAR(8), @TarjetaCredito VARCHAR(16), @NombreCompleto VARCHAR(50), @FechaNacimiento SMALLDATETIME, @Telefono VARCHAR(10), @Direccion VARCHAR(30)  
AS
BEGIN 
	IF (EXISTS (SELECT CEDULA FROM CLIENTES WHERE CEDULA = @Cedula))
		RETURN -1;

	INSERT INTO CLIENTES(CEDULA, TARJETA_CREDITO,NOMBRE_COMPLETO, FECHA_NACIMIENTO, TELEFONO, DIRECCION)
	VALUES (@Cedula, @TarjetaCredito, @NombreCompleto, @FechaNacimiento, @Telefono, @Direccion)
	RETURN 0
END
GO

CREATE PROCEDURE ModificarCliente @Cedula VARCHAR(8), @TarjetaCredito VARCHAR(16), @NombreCompleto VARCHAR(50), @FechaNacimiento SMALLDATETIME, @Telefono VARCHAR(10), @Direccion VARCHAR(30)  
AS
BEGIN
	if (NOT EXISTS (SELECT CEDULA FROM CLIENTES WHERE CEDULA = @Cedula))
		RETURN -1;

	DECLARE @Error int
	BEGIN TRAN

	UPDATE CLIENTES 
	SET TARJETA_CREDITO = @TarjetaCredito, NOMBRE_COMPLETO = @NombreCompleto, FECHA_NACIMIENTO = @FechaNacimiento, TELEFONO = @Telefono, DIRECCION = @Direccion
	WHERE CEDULA = @Cedula;
	SET @Error=@@ERROR;

	IF(@Error = 0)
	BEGIN
		COMMIT TRAN;
		RETURN 0;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN 0;
	END	
END
GO

CREATE PROCEDURE EliminarCliente @Cedula VARCHAR(8)
AS
BEGIN 
	
	IF (NOT EXISTS (SELECT CEDULA FROM CLIENTES WHERE CEDULA = @Cedula ))
		RETURN 0;

	IF (EXISTS (SELECT CEDULA FROM ALQUILERES WHERE CEDULA = @Cedula))
		RETURN -1;

	DECLARE @Error INT

	BEGIN TRAN
	DELETE CLIENTES WHERE CEDULA = @Cedula 
	SET @Error=@@ERROR;
	
	DELETE ALQUILERES WHERE CEDULA = @Cedula ;
	SET @Error=@@ERROR+@Error;
	
	IF(@Error = 0)
	BEGIN
		COMMIT TRAN;
		RETURN 1;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN -1;
	END	
END
GO

CREATE PROCEDURE BuscarCliente @Cedula VARCHAR(8)
AS
BEGIN
	SELECT CEDULA , NOMBRE_COMPLETO, TARJETA_CREDITO, TELEFONO, DIRECCION, FECHA_NACIMIENTO  
	FROM CLIENTES
	WHERE CEDULA = @Cedula;
END
GO

CREATE PROCEDURE AgregarAuto @Matricula VARCHAR(7), @Modelo VARCHAR(20), @Marca VARCHAR(20), @Anio INT, @CantidadPuertas INT, @CostoDiario MONEY, @TipoAnclaje VARCHAR(20)
AS
BEGIN

	IF (EXISTS (SELECT MATRICULA FROM VEHICULOS WHERE MATRICULA = @Matricula))
		RETURN -1;

	DECLARE @Error INT
	BEGIN TRAN

	INSERT INTO VEHICULOS(MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO)
	VALUES (@Matricula, @Modelo, @Marca, @Anio, @CantidadPuertas, @CostoDiario)
	SET @Error=@@ERROR;

	INSERT INTO AUTOS(MATRICULA, TIPO_ANCLAJE)
	VALUES (@Matricula, @TipoAnclaje)

	IF(@Error=0)
	BEGIN
		COMMIT TRAN;
		RETURN 0;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN -1;
	END	
END
GO

CREATE PROCEDURE ModificarAuto @Matricula VARCHAR(7), @Modelo VARCHAR(20), @Marca VARCHAR(20), @Anio INT, @CantidadPuertas INT, @CostoDiario MONEY, @TipoAnclaje VARCHAR(20)
AS
BEGIN

	IF (NOT EXISTS (SELECT MATRICULA FROM AUTOS WHERE MATRICULA = @Matricula))
		RETURN -1;

	DECLARE @Error INT
	BEGIN TRAN

	UPDATE AUTOS 
	SET TIPO_ANCLAJE = @TipoAnclaje
	WHERE MATRICULA = @Matricula;
	SET @Error=@@ERROR;

	UPDATE VEHICULOS 
	SET  MODELO = @Modelo, MARCA = @Marca, ANIO = @Anio, CANTIDAD_PUERTAS = @CantidadPuertas, COSTO_DIARIO = @CostoDiario 
	WHERE MATRICULA = @Matricula;
	SET @Error=@@ERROR+@Error;

	IF(@Error=0)
	BEGIN
		COMMIT TRAN;
		RETURN 0;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN -1;
	END	
END
GO

CREATE PROCEDURE BuscarAuto @Matricula VARCHAR(7)
AS
BEGIN
	SELECT au.MATRICULA, MARCA, MODELO, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO, TIPO_ANCLAJE
	FROM AUTOS au 
	INNER JOIN VEHICULOS ve ON au.MATRICULA=ve.MATRICULA AND ve.MATRICULA=@Matricula;
END
GO

CREATE PROCEDURE AgregarUtilitario @Matricula VARCHAR(7), @Modelo VARCHAR(20), @Marca VARCHAR(20), @Anio INT, @CantidadPuertas INT, @CostoDiario MONEY, @CapacidadCarga INT, @Tipo VARCHAR(20)
AS
BEGIN

	IF (EXISTS (SELECT MATRICULA FROM VEHICULOS WHERE MATRICULA = @Matricula))
		RETURN -1;

	DECLARE @Error INT
	BEGIN TRAN

	INSERT INTO VEHICULOS(MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO)
	VALUES (@Matricula, @Modelo, @Marca, @Anio, @CantidadPuertas, @CostoDiario)
	SET @Error=@@ERROR;

	INSERT INTO UTILITARIOS(MATRICULA, CAPACIDAD_CARGA, TIPO)
	VALUES (@Matricula, @CapacidadCarga, @Tipo)

	IF(@Error=0)
	BEGIN
		COMMIT TRAN;
		RETURN 0;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN -1;
	END	
END
GO

CREATE PROCEDURE ModificarUtilitario @Matricula VARCHAR(7), @Modelo VARCHAR(20), @Marca VARCHAR(20), @Anio INT, @CantidadPuertas INT, @CostoDiario MONEY, @CapacidadCarga INT, @Tipo VARCHAR(20)
AS
BEGIN

	IF (NOT EXISTS (SELECT MATRICULA FROM UTILITARIOS WHERE MATRICULA = @Matricula))
		RETURN -1;

	DECLARE @Error INT
	BEGIN TRAN

	UPDATE UTILITARIOS 
	SET CAPACIDAD_CARGA = @CapacidadCarga, TIPO = @Tipo
	WHERE MATRICULA = @Matricula;
	SET @Error=@@ERROR;

	UPDATE VEHICULOS 
	SET  MODELO = @Modelo, MARCA = @Marca, ANIO = @Anio, CANTIDAD_PUERTAS = @CantidadPuertas, COSTO_DIARIO = @CostoDiario 
	WHERE MATRICULA = @Matricula;
	SET @Error=@@ERROR+@Error;

	IF(@Error=0)
	BEGIN
		COMMIT TRAN;
		RETURN 0;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN -1;
	END	
END
GO

CREATE PROCEDURE BuscarUtilitario @Matricula VARCHAR(7)
AS
BEGIN
	SELECT ut.MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO, CAPACIDAD_CARGA, TIPO
	FROM UTILITARIOS ut 
	INNER JOIN VEHICULOS ve ON ut.MATRICULA=ve.MATRICULA AND ve.MATRICULA=@Matricula;
END
GO

CREATE PROCEDURE EliminarVehiculo @Matricula VARCHAR(7) 
AS
BEGIN 
	
	IF (NOT EXISTS (SELECT MATRICULA FROM VEHICULOS WHERE MATRICULA = @Matricula))
		RETURN 0

	IF (EXISTS (SELECT MATRICULA FROM ALQUILERES WHERE MATRICULA = @Matricula))
		RETURN -1

	DECLARE @Error INT

	BEGIN TRAN
	DELETE UTILITARIOS 
	WHERE MATRICULA = @Matricula
	SET @Error=@@ERROR;
	
	DELETE AUTOS	
	WHERE MATRICULA = @Matricula
	SET @Error=@@ERROR+@Error;
	
	DELETE VEHICULOS 
	WHERE MATRICULA = @Matricula
	SET @Error=@@ERROR+@Error;
	
	IF(@Error=0)
	BEGIN
		COMMIT TRAN;
		RETURN 1;
	END
	ELSE
	BEGIN
		ROLLBACK TRAN;
		RETURN -1;
	END	
END	
GO

CREATE PROCEDURE AgregarAlquiler @Matricula VARCHAR(7), @Cedula VARCHAR(8), @FechaInicio SMALLDATETIME, @FechaFin SMALLDATETIME
AS
BEGIN
		IF (NOT EXISTS (SELECT * FROM CLIENTES WHERE CEDULA = @Cedula))
		RETURN -1
		IF (NOT EXISTS (SELECT * FROM VEHICULOS WHERE MATRICULA = @Matricula))
		RETURN -2
		IF (EXISTS (SELECT * FROM ALQUILERES WHERE MATRICULA = @Matricula
											AND (NOT(ALQUILERES.FECHA_FIN <= @FechaInicio OR ALQUILERES.FECHA_INICIO >= @FechaFin))))
		RETURN -3
		IF(DATEDIFF(DAY, @FechaInicio, @FechaFin) < 1)
			RETURN -4
		BEGIN TRAN
		DECLARE @CostoTotal MONEY;
		SET @CostoTotal = (SELECT COSTO_DIARIO*(DATEDIFF(DAY, @FechaInicio, @FechaFin)) FROM VEHICULOS WHERE MATRICULA = @matricula);

		INSERT INTO ALQUILERES(MATRICULA, CEDULA, FECHA_INICIO, FECHA_FIN, COSTO_TOTAL)
		VALUES(@Matricula, @Cedula, @FechaInicio, @FechaFin, @CostoTotal)

		IF(@@Error=0)
			BEGIN
				COMMIT TRAN
				RETURN @CostoTotal;
			END
		ELSE
			BEGIN
				ROLLBACK TRAN;
				RETURN -5;
			END	
END
GO

CREATE PROCEDURE CalcularCostoAlquiler @Matricula VARCHAR(7), @FechaInicio SMALLDATETIME, @FechaFin SMALLDATETIME
AS
BEGIN
	DECLARE @CostoTotal MONEY;
	SET @CostoTotal = (SELECT COSTO_DIARIO*(DATEDIFF(DAY, @FechaInicio, @FechaFin)) FROM VEHICULOS WHERE MATRICULA = @matricula);
	RETURN @CostoTotal
END
GO

CREATE PROCEDURE ListarAutos 
AS
BEGIN 
	SELECT au.MATRICULA, MARCA, MODELO, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO, TIPO_ANCLAJE  
	FROM AUTOS AS au INNER JOIN VEHICULOS AS v ON au.MATRICULA=v.MATRICULA;
END
GO

CREATE PROCEDURE ListarUtilitarios 
AS
BEGIN 
	SELECT ut.MATRICULA, MODELO, MARCA, ANIO, CANTIDAD_PUERTAS, COSTO_DIARIO, CAPACIDAD_CARGA, TIPO  
	FROM UTILITARIOS AS ut INNER JOIN VEHICULOS AS v ON ut.MATRICULA=v.MATRICULA;
END
GO

CREATE PROCEDURE ListarVehiculosDisponibles @FechaUno SMALLDATETIME, @FechaDos SMALLDATETIME
AS
BEGIN
	SELECT ve.*, au.TIPO_ANCLAJE, ut.TIPO, ut.CAPACIDAD_CARGA
	FROM VEHICULOS ve 
	LEFT JOIN AUTOS au ON au.MATRICULA = ve.MATRICULA
	LEFT JOIN UTILITARIOS ut ON ut.MATRICULA = ve.MATRICULA
	WHERE NOT ve.MATRICULA IN(SELECT MATRICULA
					     FROM ALQUILERES 
					     WHERE (FECHA_INICIO >=@FechaUno AND FECHA_FIN<=@FechaDos) 
					     OR (FECHA_INICIO <= @FechaUno AND FECHA_FIN >=@FechaDos)
						 OR (FECHA_INICIO >= @FechaDos AND FECHA_FIN <= @FechaUno)
						 OR (FECHA_INICIO <= @FechaDos AND FECHA_FIN >= @FechaUno))
END
GO

CREATE PROCEDURE TotalRecaudado @Matricula VARCHAR(7)
AS
BEGIN
	DECLARE @CostoTotal MONEY;
	SET @CostoTotal = (SELECT SUM(COSTO_TOTAL) FROM ALQUILERES WHERE MATRICULA = @matricula);
	RETURN @CostoTotal
END
GO

CREATE PROCEDURE ListadoAlquileres @Matricula VARCHAR(7)
AS
BEGIN
SELECT al.*, CLI.DIRECCION, CLI.FECHA_NACIMIENTO, cli.NOMBRE_COMPLETO, cli.TARJETA_CREDITO, cli.TELEFONO
FROM ALQUILERES al
INNER JOIN CLIENTES cli ON cli.CEDULA = al.CEDULA
WHERE al.MATRICULA = @Matricula
END
GO